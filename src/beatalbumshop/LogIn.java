package beatalbumshop;

import beatalbumshop.config.Account;
import beatalbumshop.dao.Firebase;
import beatalbumshop.model.LoggedInUser;
import beatalbumshop.model.User;
import com.google.api.core.ApiFuture;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.Query;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class LogIn extends javax.swing.JFrame {

    private static FirebaseApp firebaseApp;
    private static Firestore firestore;

    public LogIn() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        
        addPlaceholderText(txtEmail, "Email");
        addPlaceholderText(txtPassword, "Password");
    }
    private void addPlaceholderText(JTextField textField, String placeholderText) {
        // Save the default foreground color of the text field
        Color defaultColor = textField.getForeground();
        
        // Set the placeholder text
        textField.setText(placeholderText);

        // Add a focus listener to handle the placeholder text
        textField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textField.getText().equals(placeholderText)) {
                    textField.setText("");
                    textField.setForeground(defaultColor);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (textField.getText().isEmpty()) {
                    textField.setForeground(Color.GRAY);
                    textField.setText(placeholderText);
                }
            }
        });
    }
    public static void initializeFirebaseApp() {
        if (firebaseApp == null) {
            try {
                InputStream serviceAccount = new FileInputStream("src/beatalbumshop/config/serviceAccountKey.json");
                GoogleCredentials credentials = GoogleCredentials.fromStream(serviceAccount);
                FirebaseOptions options = new FirebaseOptions.Builder()
                          .setCredentials(credentials)
                          .build();
                firebaseApp = FirebaseApp.initializeApp(options);
                firestore = FirestoreClient.getFirestore(firebaseApp);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    public static boolean isValidEmail(String email) {
        String emailRegex = "^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$";
        return email.matches(emailRegex);
    }

    public String validateFormLogin(String email, String password) {
        // Kiểm tra tính hợp lệ của email
        if (email.isEmpty()) {
            txtEmail.requestFocus();
            return "Email is required";
        } else if (!isValidEmail(email)) {
            txtEmail.requestFocus();
            return "Invalid email format";
        }

        if (password.isEmpty()) {
            txtPassword.requestFocus();
            return "Password is required";
        }

        return null; // Trả về null nếu form hợp lệ
    }

    // connect firebase
    public static boolean isUsernameValid(String email, String password) {
//        initializeFirebaseApp();

        Firestore firestore = (Firestore) Firebase.getFirestore(Account.FIREBASE_PROJECT_ID);
        CollectionReference colRef = firestore.collection("users");
        
        try {
            QuerySnapshot querySnapshot = colRef.get().get();
            List<QueryDocumentSnapshot> users = querySnapshot.getDocuments();

            for (QueryDocumentSnapshot user : users) {
                String usernameFromFirestore = user.getString("email");
                String passwordFromFirestore = user.getString("password");

                if (usernameFromFirestore.equals(email) && passwordFromFirestore.equals(password)) {
                    return true;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSigninForm = new javax.swing.JPanel();
        txtEmail = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblCreateAccount = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblForgotPassword = new javax.swing.JLabel();
        lblAguest = new javax.swing.JLabel();
        btnLogin = new beatalbumshop.componment.MyButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlSigninForm.setBackground(new java.awt.Color(255, 255, 255));
        pnlSigninForm.setPreferredSize(new java.awt.Dimension(441, 600));

        txtEmail.setFont(new java.awt.Font("Open Sans", 0, 16)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(82, 82, 82));
        txtEmail.setText("Email");
        txtEmail.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.black));
        txtEmail.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Open Sans", 1, 36)); // NOI18N
        lblTitle.setText("Log in");

        lblCreateAccount.setBackground(new java.awt.Color(255, 255, 255));
        lblCreateAccount.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblCreateAccount.setText("CREATE ACCOUNT");
        lblCreateAccount.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.BLACK));
        lblCreateAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCreateAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCreateAccountMouseClicked(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Open Sans", 0, 16)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(82, 82, 82));
        txtPassword.setText("jPasswordField1");
        txtPassword.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.GRAY));
        txtPassword.setPreferredSize(new java.awt.Dimension(64, 26));
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        lblForgotPassword.setBackground(new java.awt.Color(255, 255, 255));
        lblForgotPassword.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblForgotPassword.setText("FORGOT PASSWORD?");
        lblForgotPassword.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.BLACK));
        lblForgotPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblForgotPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblForgotPasswordMousePressed(evt);
            }
        });

        lblAguest.setBackground(new java.awt.Color(255, 255, 255));
        lblAguest.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblAguest.setText("CONTINUE AS A GUEST");
        lblAguest.setBorder(BorderFactory.createMatteBorder(0,0,1,0, Color.gray));
        lblAguest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAguest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAguestMouseClicked(evt);
            }
        });

        btnLogin.setBackground(new java.awt.Color(0, 0, 0));
        btnLogin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnLogin.setText("Log in");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSigninFormLayout = new javax.swing.GroupLayout(pnlSigninForm);
        pnlSigninForm.setLayout(pnlSigninFormLayout);
        pnlSigninFormLayout.setHorizontalGroup(
            pnlSigninFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSigninFormLayout.createSequentialGroup()
                .addGroup(pnlSigninFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSigninFormLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(pnlSigninFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblForgotPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlSigninFormLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(lblAguest)))
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSigninFormLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlSigninFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSigninFormLayout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(166, 166, 166))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSigninFormLayout.createSequentialGroup()
                        .addComponent(lblCreateAccount)
                        .addGap(155, 155, 155))))
        );
        pnlSigninFormLayout.setVerticalGroup(
            pnlSigninFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSigninFormLayout.createSequentialGroup()
                .addContainerGap(84, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(60, 60, 60)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblForgotPassword)
                .addGap(63, 63, 63)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(lblCreateAccount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAguest)
                .addGap(53, 53, 53))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlSigninForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSigninForm, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed

    }//GEN-LAST:event_txtEmailActionPerformed

    private void lblCreateAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCreateAccountMouseClicked
        dispose();
        new SignUp().setVisible(true);
    }//GEN-LAST:event_lblCreateAccountMouseClicked

    private void lblForgotPasswordMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblForgotPasswordMousePressed

    }//GEN-LAST:event_lblForgotPasswordMousePressed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void lblAguestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAguestMouseClicked
        dispose();
        new Main().setVisible(true);
    }//GEN-LAST:event_lblAguestMouseClicked

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        System.out.println("1");
        String email = txtEmail.getText();
        String pass = new String(txtPassword.getPassword());
        String errorMessage = validateFormLogin(email, pass);
        if (errorMessage == null) {
            boolean isValidCredentials = isUsernameValid(email, pass);
            if (isValidCredentials) {
                try {
                    // dang nhap thanh cong
                    dispose();
                    
                    Firestore firestore = (Firestore) Firebase.getFirestore(Account.FIREBASE_PROJECT_ID);
                    CollectionReference colRef = firestore.collection("users");
                    
                    Query query = colRef.whereEqualTo("email", email);

                    ApiFuture<QuerySnapshot> querySnapshot = query.get();
                    List<QueryDocumentSnapshot> users = querySnapshot.get().getDocuments();
                    if (users.size() > 0) {
                        for (QueryDocumentSnapshot user : users) {
                            User u = new User(user.getLong("userID"), user.getString("email"),user.getString("password"),user.getString("dateCreated") ,user.getLong("role"));
                            LoggedInUser.setCurrentUser(u);
                            
                            if(LoggedInUser.isAdmin() || LoggedInUser.isStaff()) {
                                new MainAdmin().setVisible(true);
                                break;
                            }
                            else {
                                new Main().setVisible(true);
                                break;
                            }
                            
//                            long role = user.getLong("role");
//                            if (role == 0) {
////                                JOptionPane.showMessageDialog(this, "Khách hàng");
//                                new Main().setVisible(true);
//                            } else if (role == 1) {
////                                JOptionPane.showMessageDialog(this, "Staff");
//                                new MainAdmin().setVisible(true);
//                            }
//                            else if (role == 2) {
////                                JOptionPane.showMessageDialog(this, "Admin");
//                                new MainAdmin().setVisible(true);
//                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Không tìm thấy người dùng.");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Wrong account or password!");
                txtEmail.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null, errorMessage, "Login Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogIn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private beatalbumshop.componment.MyButton btnLogin;
    private javax.swing.JLabel lblAguest;
    private javax.swing.JLabel lblCreateAccount;
    private javax.swing.JLabel lblForgotPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlSigninForm;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}
